@Library('clinica-jenkins-sharedlibrary') _

pipeline {
  options {
    timeout(time: 2, unit: 'HOURS')
    disableConcurrentBuilds(abortPrevious: true)
  }
  agent none
  stages {
    stage('Checkout') {
      failFast true
      parallel {
        stage('Test on Linux') {
          agent {
            label 'ubuntu'
          }
          environment {
            CONDA_ENV = "$WORKSPACE/env"
            CONDA_HOME = "$HOME/miniconda"
            PATH = "$HOME/.local/bin:$PATH"
            POETRY = "poetry"
          }
          stages {
            stage('Build environment') {
              steps {
		sh 'echo "Agent name is ${NODE_NAME}"'
		buildCondaEnv()		
		checkCommand(name: "poetry")
              }
            }
            stage('Install Clinica') {
              steps {
		installPackage()
              }
            }
            stage('Test instantiation') {
              environment {
                PATH = "/usr/local/Modules/bin:$PATH"
                WORK_DIR = '/mnt/data/ci/working_dir_linux'
                INPUT_DATA_DIR = '/mnt/data_ci'
              }
              steps {
		runTest(name: "./instantiation", n_jobs: "4", junit:"instantiation_linux.xml")                
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh 'rm -rf ${WORK_DIR}/*'
                }
              }
            }
            stage('Test converters') {
              environment {
                PATH = "/usr/local/Modules/bin:$PATH"
                WORK_DIR = '/mnt/data/ci/working_dir_linux'
                INPUT_DATA_DIR = '/mnt/data_ci'
                TMP_BASE = '/mnt/data/ci/tmp'
              }
              steps {
		runTest(name: "./nonregression/iotools/test_run_converters.py", n_jobs: "2", junit:"run_converters_linux.xml")                
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh '''
                    rm -rf ${WORK_DIR}/*
                    rm -rf ${TMP_BASE}/*
                  '''
                }
              }
            }
	    stage('Non Regression Fast') {
              environment {
                PATH = "/usr/local/Modules/bin:$PATH"
                WORK_DIR = "/mnt/data/ci/working_dir_linux"
                INPUT_DATA_DIR = "/mnt/data_ci"
                TMP_DIR = "/mnt/data/ci/tmp"
                }
              steps {
                catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE'){
                sh '''
                  source "${CONDA_HOME}/etc/profile.d/conda.sh"
                  conda activate $CONDA_ENV
                  mkdir -p $WORK_DIR
                  source /usr/local/Modules/init/profile.sh
                  module load clinica.all
                  cd test
                  poetry run pytest \
                    --junitxml=./test-reports/nonregression_linux.xml \
                    --verbose \
                    --working_directory=$WORK_DIR \
                    --input_data_directory=$INPUT_DATA_DIR \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    -m "fast" \
                    ./nonregression
                '''
                }
              }
	     post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh 'rm -rf ${WORK_DIR}'
                }
              }
            }
            stage('Test iotools') {
              environment {
                PATH = "/usr/local/Modules/bin:$PATH"
                WORK_DIR = '/mnt/data/ci/working_dir_linux'
                INPUT_DATA_DIR = '/mnt/data_ci'
                TMP_BASE = '/mnt/data/ci/tmp'
              }
              steps {
                sh '''
                  source "${CONDA_HOME}/etc/profile.d/conda.sh"
                  conda activate "${CONDA_ENV}"
                  source /usr/local/Modules/init/profile.sh
                  module load clinica.all
                  cd test
                  taskset -c 0-21 poetry run pytest \
                    --junitxml=./test-reports/run_converters_linux.xml \
                    --verbose \
                    --working_directory=$WORK_DIR \
                    --input_data_directory=$INPUT_DATA_DIR \
                    --basetemp=$TMP_BASE \
                    --disable-warnings \
                    --timeout=0 \
                    -n 2 \
                    ./nonregression/iotools/test_run_utils.py
                  '''
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh '''
                    rm -rf ${WORK_DIR}/*
                    rm -rf ${TMP_BASE}/*
                  '''
                }
              }
            }
          }
          post {
            always {
              cleanWs()
            }
          }
        }
        stage('Test on macOS') {
          agent {
            label 'macos'
          }
          environment {
            CONDA_ENV = "$WORKSPACE/env"
            CONDA_HOME = "$HOME/miniconda3"
            PATH = "$HOME/.local/bin:$PATH"
          }
          stages {
            stage('Build environment') {
              steps {
		sh 'echo "Agent name is ${NODE_NAME}"'
		buildCondaEnv()		
		checkCommand(name: "poetry")
              }
            }
            stage('Install Clinica') {
              steps {
		installPackage()
              }
            }
            stage('Test instantiation') {
              environment {
                WORK_DIR = '/Volumes/data/working_dir_mac'
                INPUT_DATA_DIR = '/Volumes/data_ci'
              }
              steps {
		runTest(name: "./instantiation", n_jobs: "4", junit:"instantiation_mac.xml") 
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh 'rm -rf ${WORK_DIR}/*'
                }
              }
            }
            stage('Test converters') {
              environment {
                WORK_DIR = '/Volumes/data/working_dir_mac'
                INPUT_DATA_DIR = '/Volumes/data_ci'
                TMP_BASE = '/Volumes/data/tmp'
              }
              steps {
		runTest(name: "./nonregression/iotools/test_run_converters.py", n_jobs: "2", junit:"run_converters_mac.xml")                
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh '''
                    rm -rf ${WORK_DIR}/*
                    rm -rf ${TMP_BASE}/*
                  '''
                }
              }
            }
            stage('Test iotools') {
              environment {
                WORK_DIR = '/Volumes/data/working_dir_mac'
                INPUT_DATA_DIR = '/Volumes/data_ci'
                TMP_BASE = '/Volumes/data/tmp'
              }
              steps {
                sh '''
                  source "${CONDA_HOME}/etc/profile.d/conda.sh"
                  conda activate "${CONDA_ENV}"
                  source "${BREW_PREFIX}/opt/modules/init/bash"
                  module load clinica.all
                  cd test
                  poetry run pytest \
                    --verbose \
                    --working_directory=$WORK_DIR \
                    --input_data_directory=$INPUT_DATA_DIR \
                    --basetemp=$TMP_BASE \
                    --junitxml=./test-reports/run_converters_mac.xml \
                    --disable-warnings \
                    ./nonregression/iotools/test_run_utils.py
                '''
              }
              post {
                always {
                  junit 'test/test-reports/*.xml'
                }
                success {
                  sh '''
                    rm -rf ${WORK_DIR}/*
                    rm -rf ${TMP_BASE}/*
                  '''
                }
              }
            }
          }
          post {
            always {
              cleanWs()
            }
          }
        }
      }
    }
  }
  post {
    failure {
      mail to: 'clinica-ci@inria.fr',
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Something is wrong with ${env.BUILD_URL}"
    }
  }
}
